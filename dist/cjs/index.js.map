{
  "version": 3,
  "sources": ["../../index.js"],
  "sourcesContent": ["/**\r\n * # Vectored - A JavaScript 2 and 3D vector math library\r\n */\r\n\r\n/**\r\n * Constructor. Will also work without the `new` keyword\r\n *\r\n * @example\r\n *     let vec1 = new vec(100, 50);\r\n *     let vec2 = vec(42, 1337);\r\n *\r\n * @param {Number} x Value of the x axis\r\n * @param {Number} y Value of the y axis\r\n * @param {Number} z Value of the z axis\r\n * @return {Vec}\r\n * @api public\r\n */\r\nexport function Vec(x, y, z) {\r\n\tif (!(this instanceof Vec)) {\r\n\t\treturn new Vec(x, y, z);\r\n\t}\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n}\r\n\r\n/**\r\n * Returns a vector that faces up\r\n *\r\n * @example\r\n *     let vector = new Vec.up();\r\n *\r\n *     vector.toObject();\r\n *     // => { x: 0, y: 1, z: 0 }\r\n *\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.up = function () {\r\n\treturn new Vec(0, 1, 0);\r\n};\r\n\r\n/**\r\n * Returns a vector that faces left\r\n *\r\n * @example\r\n *     let vector = new Vec.left();\r\n *\r\n *     vector.toObject();\r\n *     // => { x: -1, y: 0, z: 0 }\r\n *\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.left = function () {\r\n\treturn new Vec(-1, 0, 0);\r\n};\r\n\r\n/**\r\n * Returns a vector that faces down\r\n *\r\n * @example\r\n *     let vector = new Vec.down();\r\n *\r\n *     vector.toObject();\r\n *     // => { x: 0, y: -1, z: 0 }\r\n *\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.down = function () {\r\n\treturn new Vec(0, -1, 0);\r\n};\r\n\r\n/**\r\n * Returns a vector that faces right\r\n *\r\n * @example\r\n *     let vector = new Vec.right();\r\n *\r\n *     vector.toObject();\r\n *     // => { x: 1, y: 0, z: 0 }\r\n *\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.right = function () {\r\n\treturn new Vec(1, 0, 0);\r\n};\r\n\r\n/**\r\n * Returns a vector that faces forward\r\n *\r\n * @example\r\n *     let vector = new Vec.forward();\r\n *\r\n *     vector.toObject();\r\n *     // => { x: 0, y: 0, z: 1 }\r\n *\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.forward = function () {\r\n\treturn new Vec(0, 0, 1);\r\n};\r\n\r\n/**\r\n * Returns a vector that faces backwards\r\n *\r\n * @example\r\n *     let vector = new Vec.back();\r\n *\r\n *     vector.toObject();\r\n *     // => { x: 0, y: 0, z: -1 }\r\n *\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.back = function () {\r\n\treturn new Vec(0, 0, -1);\r\n};\r\n\r\n/**\r\n * Returns a vector containing all ones\r\n *\r\n * @example\r\n *     let vector = new Vec.one();\r\n *\r\n *     vector.toObject();\r\n *     // => { x: 1, y: 1, z: 1 }\r\n *\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.one = function () {\r\n\treturn new Vec(1, 1, 1);\r\n};\r\n\r\n/**\r\n * Returns a vector containing all zeros\r\n *\r\n * @example\r\n *     let vector = new Vec.up();\r\n *\r\n *     vector.toObject();\r\n *     // => { x: 0, y: 0, z: 0 }\r\n *\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.zero = function () {\r\n\treturn new Vec(0, 0, 0);\r\n};\r\n\r\n/*\r\nCreate vector\r\n*/\r\n\r\n/**\r\n * Create a vector from an array\r\n *\r\n * @example\r\n *     let array = [10, 20, 0]\r\n *     let vector = new Vec.fromArray(array);\r\n *\r\n *     vector.toObject();\r\n *     // => { x: 10, y: 20, z: 0 }\r\n *\r\n * @name Vec.fromArray\r\n * @param {arr} arr Array containing x, y and z if not the value will be a 0\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.fromArray = function (arr) {\r\n\treturn new Vec(arr[0] || 0, arr[1] || 0, arr[2] || 0);\r\n};\r\n\r\n/**\r\n * Turn the x, y and z components of an object into a Vector\r\n *\r\n * @example\r\n *     let vector = new Vec({x: 10, y: 20, z:3});\r\n *\r\n *     vector.toObject();\r\n *     // => { x: 10, y: 20, z: 3 }\r\n *\r\n * @name Vec.formObject\r\n * @param {obj} obj Object containing x, y and z if not the value will be a 0\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.formObject = function (obj) {\r\n\treturn new Vec(obj.x || 0, obj.y || 0, obj.z || 0);\r\n};\r\n\r\n/**\r\n * Return an object representing the vector\r\n *\r\n * @example\r\n *     let vector = new Vec(10, 20);\r\n *\r\n *     vector.toObject();\r\n *     // => { x: 10, y: 20, z: 0 }\r\n *\r\n * @return {Object} Object representing the vector\r\n * @api public\r\n */\r\nVec.prototype.toObject = function () {\r\n\treturn { x: this.x, y: this.y, z: this.z };\r\n};\r\n\r\n/**\r\n * Returns an array representing the vector\r\n *\r\n * @example\r\n *     let vector = new Vec(10, 20);\r\n *\r\n *     vector.toArray();\r\n *     // => [10, 20, 0]\r\n *\r\n * @return {Array} Array representing the vector\r\n * @api public\r\n */\r\nVec.prototype.toArray = function () {\r\n\treturn [this.x, this.y, this.z];\r\n};\r\n\r\n/**\r\n * Returns a string representing the vector\r\n *\r\n * @example\r\n *     let vector = new Vec(10, 20);\r\n *\r\n *     vector.toObject();\r\n *     // => '(10, 20, 0)'\r\n *\r\n * @return {String} String representing the vector\r\n * @api public\r\n */\r\nVec.prototype.toString = function () {\r\n\treturn `x:${this.x} y:${this.y} z:${this.z}`;\r\n};\r\n\r\n/**\r\n * Returns a copy of a vector\r\n *\r\n * @example\r\n *     let vec1 = new Vec(10, 20);\r\n *     let vec2 = vec.copy();\r\n *\r\n *     console.log(vec2);\r\n *     // => '(10, 20, 0)'\r\n *\r\n * @return {String} String representing the vector\r\n * @api public\r\n */\r\nVec.prototype.copy = function () {\r\n\treturn new Vec(this.x, this.y, this.z);\r\n};\r\n\r\n/*\r\nBasic Math\r\n*/\r\n\r\n/**\r\n * Add two vectors together\r\n *\r\n * @example\r\n *  let vec1 = new Vec(1, 5, 2);\r\n *  let vec2 = new Vec(8, 3, 3);\r\n *\r\n *  vec1.add(vec2);\r\n *  vec1.toObject();\r\n *  // => {x: 9, y: 8, z: 5}\r\n *\r\n * @param {v} v The other vector you want to add to this one\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.prototype.add = function (v) {\r\n\tif (v instanceof Vec) {\r\n\t\treturn new Vec((this.x += v.x), (this.y += v.y), (this.z += v.z));\r\n\t} else {\r\n\t\treturn new Vec((this.x += v), (this.y += v), (this.z += v));\r\n\t}\r\n};\r\n\r\n/**\r\n * Subtract two vectors from one another\r\n *\r\n * @example\r\n *     let vec1 = new Vec(2, 5, 3);\r\n *     let vec2 = new Vec(1, 3, 2);\r\n *\r\n *     vec1.subtract(vec2);\r\n *     vec1.toObject();\r\n *     // => {x: 1, y: 2, z: 1}\r\n *\r\n * @param {v} v The other vector you want to subtract to this one\r\n * @return {Vec} `this` for chaining capabilities\r\n * @api public\r\n */\r\nVec.prototype.subtract = function (v) {\r\n\tif (v instanceof Vec) {\r\n\t\treturn new Vec((this.x -= v.x), (this.y -= v.y), (this.z -= v.z));\r\n\t} else {\r\n\t\treturn new Vec((this.x -= v), (this.y -= v), (this.z -= v));\r\n\t}\r\n};\r\n// sub short for subract\r\nVec.prototype.sub = Vec.prototype.subtract;\r\n\r\n/**\r\n * Multiply two vectors by one another\r\n *\r\n * @example\r\n *     let vec1 = new Vec(2, 8, 1);\r\n *     let vec2 = new Vec(4, 2, 3);\r\n *\r\n *     vec1.multiply(vec2);\r\n *     vec1.toObject();\r\n *     // => {x: 8, y: 16, z: 3}\r\n *\r\n * @param {v} v The other vector you want to multiply by\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.prototype.multiply = function (v) {\r\n\tif (v instanceof Vec) {\r\n\t\treturn new Vec((this.x *= v.x), (this.y *= v.y), (this.z *= v.z));\r\n\t} else {\r\n\t\treturn new Vec((this.x *= v), (this.y *= v), (this.z *= v));\r\n\t}\r\n};\r\n// mult shorthand for multiply\r\nVec.prototype.mult = Vec.prototype.multiply;\r\n\r\n/**\r\n * Divide two vectors by one another\r\n *\r\n * @example\r\n *     let vec1 = new Vec(5, 10, 9);\r\n *     let vec2 = new Vec(2, 5, 3);\r\n *\r\n *     vec1.divide(vec2);\r\n *     vec1.toObject();\r\n *     // => {x: 2.5, y: 2, z: 3}\r\n *\r\n * @param {v} v The other vector you want to divide by\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.prototype.divide = function (v) {\r\n\tif (v instanceof Vec) {\r\n\t\treturn new Vec((this.x /= v.x), (this.y /= v.y), (this.z /= v.z));\r\n\t} else {\r\n\t\treturn new Vec((this.x /= v), (this.y /= v), (this.z /= v));\r\n\t}\r\n};\r\n// div shorthand for divide\r\nVec.prototype.div = Vec.prototype.divide;\r\n\r\n/**\r\n * Remainder when dividing two vectors\r\n *\r\n * @example\r\n *     let vec1 = new Vec(1, 3);\r\n *     let vec2 = new Vec(4, 2);\r\n *\r\n *     vec1.remainder(vec2);\r\n *     // => {x: 1, y: 1, z: 0}\r\n *\r\n * @param {Vector} v vector to divide by\r\n * @return {Vector} Remainder of the vector\r\n * @api public\r\n */\r\nVec.prototype.remainder = function (v) {\r\n\tif (v instanceof Vec) {\r\n\t\treturn new Vec((this.x %= v.x), (this.y %= v.y), (this.z %= v.z));\r\n\t} else {\r\n\t\treturn new Vec((this.x %= v), (this.y %= v), (this.z %= v));\r\n\t}\r\n};\r\n// rem shorthand for remainder\r\nVec.prototype.rem = Vec.prototype.remainder;\r\n\r\n/**\r\n * Create a vector from a 2D radian angle\r\n *\r\n * @example\r\n *     let vector = new Vec().fromAngle(Math.PI / 2, 1);\r\n *\r\n *     vector.toObject();\r\n *     // => {x: 0, y: 1, z: 0}\r\n *\r\n * @param {Number} angle desired angle in radians\r\n * @param {Number} length length of the new vector (defaults to 1)\r\n * @return {Vec} `this` for chaining capabilities\r\n * @api public\r\n */\r\nVec.fromAngle = function fromAngle(angle, length) {\r\n\tif (typeof length === 'undefined') {\r\n\t\tlength = 1;\r\n\t}\r\n\treturn new Vec(length * Math.cos(angle), length * Math.sin(angle), 0);\r\n};\r\n\r\n/**\r\n * Create a vector from a pair of ISO spherical angles\r\n *\r\n * @example\r\n *     let vector = new Vec().fromAngles(1.5, 2, 5);\r\n *\r\n *     vector.toObject();\r\n *     // => {x: 4.535, y: -0.353, z: -2.075}\r\n *\r\n * @param {Number} theta polar angle, in radians (zero is up)\r\n * @param {Number} phi azimuthal angle, in radians\r\n * @param {Number} length length of the new vector (defaults to 1)\r\n * @return {Vec} `this` for chaining capabilities\r\n * @api public\r\n */\r\nVec.fromAngles = function (theta, phi, length) {\r\n\tif (typeof length === 'undefined') {\r\n\t\tlength = 1;\r\n\t}\r\n\tconst cosPhi = Math.cos(phi);\r\n\tconst sinPhi = Math.sin(phi);\r\n\tconst cosTheta = Math.cos(theta);\r\n\tconst sinTheta = Math.sin(theta);\r\n\r\n\treturn new Vec(length * sinTheta * sinPhi, -length * cosTheta, length * sinTheta * cosPhi);\r\n};\r\n\r\n/**\r\n * Create a new 2D vector with a random angle\r\n *\r\n * @example\r\n *     let vector = Vec.random2D;\r\n *\r\n *     vector.toObject();\r\n *     // => {x: 0.616, y: 0.787, z: 0}\r\n *\r\n * @return {Vec} `this` for chaining capabilities\r\n * @api public\r\n */\r\nVec.random2D = function random2D() {\r\n\treturn Vec.fromAngle(Math.random() * twoPi);\r\n};\r\n\r\n/**\r\n * Create a new 3D vector with a random angle\r\n *\r\n * @example\r\n *     let vector = new Vec.random3D;\r\n *\r\n *     vec1.toObject();\r\n *     // => {x: 0.442, y: -0.800, z: -0.405}\r\n *\r\n * @return {Vec} New Vec instance\r\n * @api public\r\n */\r\nVec.random3D = function random3D() {\r\n\tconst angle = Math.random() * twoPi;\r\n\tconst vz = Math.random() * 2 - 1;\r\n\tconst vzBase = Math.sqrt(1 - vz * vz);\r\n\tconst vx = vzBase * Math.cos(angle);\r\n\tconst vy = vzBase * Math.sin(angle);\r\n\treturn new Vec(vx, vy, vz);\r\n};\r\n\r\n/**\r\n * Get the negative of a vector\r\n *\r\n * @example\r\n *     let vector = new Vec(2, -1, 5);\r\n *\r\n *     vector.negative();\r\n *     vector.toObject();\r\n *     // => {x: -2, y: 1, z: -5}\r\n *\r\n * @return {Vec} `this` for chaining capabilities\r\n * @api public\r\n */\r\nVec.prototype.negative = function () {\r\n\treturn new Vec(-this.x, -this.y, -this.z);\r\n};\r\n\r\n/**\r\n * Get the length / magnitude of a vector\r\n *\r\n * @example\r\n *     let vector = new Vec(3, 4, 0);\r\n *\r\n *     vector.length();\r\n *     // => 5\r\n *\r\n * @return {Number} Length / Magnitude\r\n * @api public\r\n */\r\nVec.prototype.length = function () {\r\n\treturn Math.sqrt(this.lengthSq());\r\n};\r\nVec.prototype.magnitude = Vec.prototype.length;\r\n\r\n/**\r\n * Return the distance between 2 vectors if they where points\r\n *\r\n * @example\r\n *     let vec1 = new Vec(3, 5, 0);\r\n *     let vec2 = new Vec(2, 1, 0);\r\n *\r\n *     vec1.distance(vec2);\r\n *     // => 4.1231056\r\n *\r\n * @param {Vector} v other vector point\r\n * @return {Number} length between two points\r\n * @api public\r\n */\r\nVec.prototype.distance = function (v) {\r\n\treturn this.sub(v).magnitude();\r\n};\r\n\r\n/**\r\n * Get the squared lenght / magnitude of a Vector\r\n *\r\n * @example\r\n *     let vector = new Vec(3, 4, 0);\r\n *\r\n *     vector.lengthSq();\r\n *     // => 25\r\n *\r\n * @return {Number} Squared lenght / magnitude of the vector\r\n * @api public\r\n */\r\nVec.prototype.lengthSq = function () {\r\n\tconst x = this.x;\r\n\tconst y = this.y;\r\n\tconst z = this.z;\r\n\treturn x * x + y * y + z * z;\r\n};\r\nVec.prototype.magnitudeSq = Vec.prototype.lengthSq;\r\nVec.prototype.magsq = Vec.prototype.lengthSq;\r\n\r\n/**\r\n * Normalize the vector lenght to 1\r\n *\r\n * @example\r\n *     let vector = new Vec(4, 6, 5);\r\n *\r\n *     vector.normalize();\r\n *     vector.toObject();\r\n *     // => {x: 0.455, y: 0.683, z: 0.569}\r\n *\r\n * @return {Vec} `this` for chaining capabilities\r\n * @api public\r\n */\r\nVec.prototype.normalize = function () {\r\n\tconst length = this.length();\r\n\r\n\tif (length !== 0) {\r\n\t\tthis.divide(length);\r\n\t}\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Set the magnitude of the vector\r\n *\r\n * @example\r\n *     let vector = new Vec(4, 6, 5);\r\n *\r\n *     vector.setMag(4);\r\n *     vector.toObject();\r\n *     // => {x: 1.823, y: 2.735, z: 2.279}\r\n *\r\n * @param {n} n The length you want the vector to be\r\n * @return {Vec} `this` for chaining capabilities\r\n * @api public\r\n */\r\nVec.prototype.setMag = function (n) {\r\n\treturn this.normalize().multiply(n);\r\n};\r\n\r\n/**\r\n * Calculates the dot product of the vector and another\r\n * @example\r\n *     let vec1 = new Vec(100, 50);\r\n *     let vec2 = new Vec(200, 60);\r\n *\r\n *     vec1.dot(vec2);\r\n *     // => 23000\r\n *\r\n * @param {Number|Vector} x x component of vector or Vector object\r\n * @param {Number} y y component of vector\r\n * @param {Number} z z component of vector\r\n * @return {Number} Dot product\r\n * @api public\r\n */\r\nVec.prototype.dot = function (x, y, z) {\r\n\tif (x instanceof Vec) {\r\n\t\treturn this.x * x.x + this.y * x.y + this.z * x.z;\r\n\t}\r\n\r\n\treturn this.x * (x || 0) + this.y * (y || 0) + this.z * (z || 0);\r\n};\r\n\r\n/**\r\n * Calculates the cross product of the vector and another\r\n *\r\n * @example\r\n *     let vec1 = new Vec(10, 20, 5);\r\n *     let vec2 = new Vec(5, 15, 10);\r\n *\r\n *     vec1.cross(vec2);\r\n *     // => {x: 125, y: -75, z:50}\r\n *\r\n * @param {Vector} v The second vector\r\n * @return {Number} Cross product\r\n * @api public\r\n */\r\nVec.prototype.cross = function (v) {\r\n\treturn new Vec(\r\n\t\tthis.y * v.z - this.z * v.y,\r\n\t\tthis.z * v.x - this.x * v.z,\r\n\t\tthis.x * v.y - this.y * v.x\r\n\t);\r\n};\r\n\r\n/**\r\n * Return a vector that is made from the largest components of two vectors\r\n *\r\n * @example\r\n *     let vec1 = new Vec(100, 50);\r\n *     let vec2 = new Vec(200, 60);\r\n *\r\n *     vec1.max(vec2);\r\n *     // => {200, 60}\r\n *\r\n * @param {Vector} v The second vector\r\n * @return {Vector} Maximum values of the 2 vectors\r\n * @api public\r\n */\r\nVec.prototype.max = function (v) {\r\n\treturn new Vec(Math.max(this.x, v.x), Math.max(this.y, v.y), Math.max(this.z, v.z));\r\n};\r\n\r\n/**\r\n * Returns a vector that is made from the smallest components of two vectors\r\n *\r\n * @example\r\n *     let vec1 = new Vec(100, 50);\r\n *     let vec2 = new Vec(200, 60);\r\n *\r\n *     vec1.min(vec2);\r\n *     // => {100, 50, 0}\r\n *\r\n * @param {Vector} v The second vector\r\n * @return {Vector} Minimum of vector\r\n * @api public\r\n */\r\nVec.prototype.min = function (v) {\r\n\treturn new Vec(Math.min(this.x, v.x), Math.min(this.y, v.y), Math.min(this.z, v.z));\r\n};\r\n\r\n/**\r\n * Rounds the vector so all values are integers\r\n *\r\n * @example\r\n *     let vec = new Vec(5.6, 8.362, 3);\r\n *\r\n *     vec.round();\r\n *     // => {x: 6, y: 8, z:3}\r\n *\r\n * @return {Vector} Rounded vector\r\n * @api public\r\n */\r\nVec.prototype.round = function () {\r\n\treturn new Vec(Math.round(this.x), Math.round(this.y), Math.round(this.z));\r\n};\r\n\r\n/**\r\n * Lerp between two vectors\r\n *\r\n * @example\r\n *     let vec1 = new Vec(1, 3);\r\n *     let vec2 = new Vec(4, 2);\r\n *\r\n *     vec1.lerp(vec2, 0.5);\r\n *     // => {x: 2.5, y: 2.5, z: 0}\r\n *\r\n * @param {Vector} v Other vector to lerp between\r\n * @param {Number} t Value used to interpolate between a and b\r\n * @return {Vector} Lerped vector\r\n * @api public\r\n */\r\nVec.prototype.lerp = function (v, t) {\r\n\t// a * (1-t) + b*t)\r\n\tconst i = v.multiply(t);\r\n\treturn this.multiply(1 - t).add(i);\r\n};\r\n\r\n/**\r\n * Set vector values\r\n *\r\n * @example\r\n *     let vec = new Vec(1, 3, 2);\r\n *\r\n *     vec.set(4, 5, 0);\r\n *     // => {x: 4, y: 5, z: 0}\r\n *\r\n * @param {Number} x New x\r\n * @param {Number} y New y\r\n * @param {Number} z New z\r\n * @return {Vector} New vector\r\n * @api public\r\n */\r\nVec.prototype.set = function (x, y, z) {\r\n\treturn new Vec(x ? x : this.x, y ? y : this.y, z ? z : this.z);\r\n};\r\n\r\n/**\r\n * Clamp the length of a vector\r\n *\r\n * @example\r\n *     let vec = new Vec(2, 4);\r\n *\r\n *     vec.clamp(1, 3);\r\n *     // => {x: 4, y: 5, z: 0}\r\n *\r\n * @param {Number} min Minimum length of the vector\r\n * @param {Number} max Maximim length of the vector\r\n * @return {Vector} Clamped vector\r\n * @api public\r\n */\r\nVec.prototype.clamp = function (min, max) {\r\n\tconst length = this.length();\r\n\r\n\tif (length > max) {\r\n\t\treturn this.setMag(max);\r\n\t} else if (length < min) {\r\n\t\treturn this.setMag(min);\r\n\t} else {\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n/**\r\n * Clone a vector\r\n *\r\n * @example\r\n *     let vec1 = new Vec(2, 4);\r\n *     let vec2 = vec1.clone\r\n *     // => {x: 2, y: 4, z: 0}\r\n *\r\n * @return {Vector} New vector instance\r\n * @api public\r\n */\r\nVec.prototype.clone = function () {\r\n\treturn new Vec(this.x, this.y, this.z);\r\n};\r\n\r\n/*\r\ntransform vector\r\n*/\r\n\r\n/**\r\n * Set the angle of a 2D vector\r\n *\r\n * @example\r\n *     let vec = new Vec(100, 0);\r\n *\r\n *     vec.rotateTo2D(-Math.PI);\r\n *     // => {x: -100, y: 0, z: 0}\r\n *\r\n * @param {Number} rad Radians to set vector to\r\n * @return {Vector} Rotated vector\r\n * @api public\r\n */\r\nVec.prototype.rotateTo2D = function (rad) {\r\n\tthis.x = this.x * Math.cos(rad) - this.y * Math.sin(rad);\r\n\tthis.y = this.x * Math.sin(rad) + this.y * Math.cos(rad);\r\n\treturn this;\r\n};\r\n\r\n/**\r\n * Rotate 2D vector by certain angle\r\n *\r\n * @example\r\n *     let vec = new Vec(100, 0);\r\n *\r\n *     vec.rotate(Math.PI / 2);\r\n *     // => {x: 0, y: 100, z: 0}\r\n *\r\n * @param {Number} rad Radians to ratate vector by\r\n * @return {Vector} Rotated vector\r\n * @api public\r\n */\r\nVec.prototype.rotate2D = function (rad) {\r\n\tconst a = Math.atan2(this.x, this.y);\r\n\treturn this.rotateTo2D(rad + a);\r\n};\r\n\r\n/*\r\n  logic\r\n*/\r\n\r\n/**\r\n * Check if two vectors are equal\r\n *\r\n * @example\r\n *     let vec = new Vec(100, 0);\r\n *\r\n *     vec.equal(new Vec(100, 0));\r\n *     // => True\r\n *\r\n * @param {Vec} v Other vector you want to compare to\r\n * @return {Boolean} result of vector comparison\r\n * @api public\r\n */\r\nVec.prototype.equals = function (v) {\r\n\treturn this.x == v.x && this.y == v.y && this.z == v.z;\r\n};\r\n\r\n/**\r\n * Check if two vectors are NOT equal\r\n *\r\n * @example\r\n *     let vec = new Vec(100, 0);\r\n *\r\n *     vec.equal(new Vec(100, 0));\r\n *     // => False\r\n *\r\n * @param {Vec} v Other vector you want to compare to\r\n * @return {Boolean} result of vector comparison\r\n * @api public\r\n */\r\nVec.prototype.notEqual = function (v) {\r\n\treturn !this.equals(v);\r\n};\r\n\r\n/*\r\nHelpers\r\n*/\r\n\r\nconst _pi = Math.PI;\r\nconst twoPi = _pi * 2;\r\n\r\nexport default Vec;\r\n"],
  "mappings": "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",
  "names": ["vectored_exports", "__export", "Vec", "vectored_default", "__toCommonJS", "x", "y", "z", "arr", "obj", "v", "angle", "length", "theta", "phi", "cosPhi", "sinPhi", "cosTheta", "sinTheta", "twoPi", "vz", "vzBase", "vx", "vy", "n", "t", "i", "min", "max", "rad", "a", "_pi"]
}
